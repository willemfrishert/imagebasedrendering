function hdr = makehdr(infile, min_exp, curve);
% MAKEHDR Creates a High-Dynamic Range Radiance Map
% from a set of low dynamic range images.
%	
% 'infile' is a textfile containing the names of the 
% low dynamic range images to use. The image names 
% in the file should be ordered in ascending order
% with respect to the exposure times.
%
% 'min_exp' is the shortest exposure time used in the
% image sequence. 'min_exp' should correspond to the 
% exposure time of the first image in the sequence.
% The exposures can be assumed being 1 f-stop apart,
% i.e. the exposure time is doubled between adjacent
% images in the sequence.
%
% 'curve' is the 3-by-256 element vector containing 
% the response curve of the camera used. 
% Can be obtained through the mkhdr or HDRShope 
% program created by Debevec, Hawkins & Duiker
% (California 1999).
%
% The return value hdr from the routine is the 
% High Dynaimc Range Radiance Map created from
% the image sequence.


% folder = dir(infile);
% 
% % filename list counter
% j = 1;
% 
% %filenames = (30: 50);
% 
% for i = 1:size(folder)
%     occurrences = findstr(folder(i).name, 'tiff');
%     if( size(occurrences) )
%         filenames[filenames, folder(i).name];
%         j = j + 1;
%     end
% end

fileID = fopen(infile);

% Just load one picture and get its dimensions
filename = fgetl(fileID);
currentImage = imread(filename);
hdr = zeros(size(currentImage, 1), size(currentImage, 2), size(currentImage, 3));
numerator = zeros(size(currentImage, 1), size(currentImage, 2), size(currentImage, 3));
denominator = zeros(size(currentImage, 1), size(currentImage, 2), size(currentImage, 3));

% Get the Width and Height of the pictures
height  = size(currentImage, 1);
width   = size(currentImage, 2);

% initialize exposure time
exposureTime = min_exp;

weightFunction = CreateWeightFunction();

while( filename ~= -1 )
    currentImage = imread(filename);
    calibratedPic = calibrate(currentImage, curve);
    
    for i = 1:height
        for j = 1:width
            rgb = reshape( currentImage(i, j, :), 3, 1 )
            Xij = reshape( calibratedPic(i, j, :), 3, 1 )
            g = reshape( CalculateWeight(rgb, weightFunction), 3, 1)
            
            for c = 1:3
                wavelen = rgb(c)
                g(wavelen)
                
                numerator(i, j, c) = numerator(i, j, c) + g(wavelen) * (Xij(c) / exposureTime);
                denominator(i, j, c) = denominator(i, j, c) + g(wavelen);
                
            end
            
            numerator(i, j, 1)
            numerator(i, j, 2)
            numerator(i, j, 3)

            denominator(i, j, 1)
            denominator(i, j, 2)
            denominator(i, j, 3)
            
            %% For every color
%             for c = 1:3
%                 hdr(i, j, c) = hdr(i, j, c) + numerator(c) / denominator;
%             end
        end
    end
    
    exposureTime = 2 * exposureTime;
    filename = fgetl(fileID);
end

hdr = numerator ./ denominator;


%hdr = zeros(512,512,3);